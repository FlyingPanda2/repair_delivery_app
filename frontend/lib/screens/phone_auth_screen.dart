import 'package:flutter/material.dart';
import 'package:mask_text_input_formatter/mask_text_input_formatter.dart';
import '../../services/api_service.dart';
import '../../services/auth_service.dart';
import '../../widgets/code_input_field.dart';

class PhoneAuthScreen extends StatefulWidget {
  const PhoneAuthScreen({super.key});

  @override
  State<PhoneAuthScreen> createState() => _PhoneAuthScreenState();
}

class _PhoneAuthScreenState extends State<PhoneAuthScreen> {
  final _phoneController = TextEditingController();
  final _maskFormatter = MaskTextInputFormatter(mask: '+7 ### ###-##-##', filter: {"#": RegExp(r'[0-9]')});
  bool _isLoading = false;
  bool _showCodeInput = false;
  String _sentPhone = '';
  bool _isPhoneValid = false;

  @override
  void initState() {
    super.initState();
    _phoneController.addListener(_updatePhoneValidation);
  }

  @override
  void dispose() {
    _phoneController.removeListener(_updatePhoneValidation);
    _phoneController.dispose();
    super.dispose();
  }

  void _updatePhoneValidation() {
    final isValid = _isValidPhone(_phoneController.text);
    if (_isPhoneValid != isValid) {
      setState(() {
        _isPhoneValid = isValid;
      });
    }
  }

  void _requestCode() async {
    final phone = _phoneController.text;
    if (!_isValidPhone(phone)) return;

    setState(() => _isLoading = true);
    try {
      await ApiService.requestCode(phone);
      setState(() {
        _sentPhone = phone;
        _showCodeInput = true;
        _isLoading = false;
      });
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞')));
      setState(() => _isLoading = false);
    }
  }

  bool _isValidPhone(String maskedPhone) {
    // –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    final cleaned = maskedPhone.replaceAll(RegExp(r'\D'), '');
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 11 —Ü–∏—Ñ—Ä: 79001234567
    return cleaned.length == 11 && cleaned.startsWith('7');
  }

  void _verifyCode(String code) async {
  setState(() => _isLoading = true);
  try {
    final token = await ApiService.verifyCode(_sentPhone, code);
    await AuthService.saveToken(token); // ‚Üê –°–û–•–†–ê–ù–Ø–ï–ú –¢–û–ö–ï–ù
    Navigator.of(context).pushReplacementNamed('/main');
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')));
    setState(() => _isLoading = false);
  }}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 24),
          child: Column(
            children: [
              const SizedBox(height: 48),
              const CircleAvatar(
                radius: 40,
                backgroundColor: Color(0xFF3B82F6),
                child: Icon(Icons.phone_android, color: Colors.white, size: 32),
              ),
              const SizedBox(height: 24),
              const Text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
              const Text('–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', textAlign: TextAlign.center, style: TextStyle(color: Color(0xFF64748B))),

              const SizedBox(height: 32),
              Container(
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(24),
                  border: Border.all(color: const Color(0xFFE2E8F0)),
                ),
                child: Column(
                  children: [
                    TextField(
                      controller: _phoneController,
                      inputFormatters: [_maskFormatter],
                      keyboardType: TextInputType.phone,
                      decoration: const InputDecoration(
                        labelText: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                        prefixIcon: Text('üá∑üá∫  '),
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 24),
                    ElevatedButton(
                      onPressed: _isLoading || !_isPhoneValid ? null : _requestCode,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF3B82F6),
                        minimumSize: const Size(double.infinity, 56),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                      ),
                      child: _isLoading
                          ? const CircularProgressIndicator(color: Colors.white)
                          : const Text('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                    ),
                  ],
                ),
              ),

              if (_showCodeInput)
                AnimatedContainer(
                  duration: const Duration(milliseconds: 300),
                  child: Container(
                    margin: const EdgeInsets.only(top: 24),
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: const Color(0xFFE2E8F0)),
                    ),
                    child: Column(
                      children: [
                        const Text('SMS-–∫–æ–¥', style: TextStyle(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 24),
                        CodeInputField(onCompleted: _verifyCode),
                        const SizedBox(height: 24),
                        Text('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä\n$_sentPhone', textAlign: TextAlign.center),
                        TextButton(onPressed: _requestCode, child: const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ')),
                        ElevatedButton(
                          onPressed: () {}, // –ª–æ–≥–∏–∫–∞ –≤ CodeInputField
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF10B981),
                            minimumSize: const Size(double.infinity, 56),
                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                          ),
                          child: const Text('–í–æ–π—Ç–∏', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                        ),
                      ],
                    ),
                  ),
                ),

              const SizedBox(height: 24),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFFEFF6FF),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: const Color(0xFFDBEAFE)),
                ),
                child: Row(
                  children: const [
                    Icon(Icons.shield, color: Color(0xFF3B82F6)),
                    SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        '–ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                        style: TextStyle(fontSize: 14),
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 24),
              const Text.rich(
                TextSpan(
                  text: '–ù–∞–∂–∏–º–∞—è "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å ',
                  style: TextStyle(color: Color(0xFF64748B), fontSize: 12),
                  children: [
                    TextSpan(text: '–£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', style: TextStyle(color: Color(0xFF3B82F6))),
                    TextSpan(text: ' –∏ ', style: TextStyle(color: Color(0xFF64748B))),
                    TextSpan(text: '–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', style: TextStyle(color: Color(0xFF3B82F6))),
                  ],
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 32),
            ],
          ),
        ),
      ),
    );
  }
}